from fastapi import FastAPI, HTTPException, Query
from pydantic import BaseModel
from typing import List, Dict, Optional
from datetime import date

app = FastAPI()

class PuntoFecha(BaseModel):
    fecha: str  # formato ISO "YYYY-MM-DD"
    valor: float

class InversionProductoResponse(BaseModel):
    inversion_total: float
    datos_por_fecha: List[PuntoFecha]

class SerieProductoResponse(BaseModel):
    __root__: List[PuntoFecha]

@app.get(
    "/reportes/inversion/producto",
    response_model=InversionProductoResponse,
    summary="Retorna inversión total y evolución temporal para un producto"
)
async def obtener_inversion_producto(
    producto: str = Query(..., description="Nombre del producto"),
    fecha_inicio: Optional[date] = Query(None, description="Fecha de inicio para el análisis (opcional)")
):
    try:
        datos = [
            {"fecha": "2025-01-01", "valor": 1200.0},
            {"fecha": "2025-02-01", "valor": 800.0},
        ]
        
        if not datos:
            raise HTTPException(status_code=404, detail="No se encontraron datos para el producto indicado")

        total = sum(p["valor"] for p in datos)

        return {
            "inversion_total": total,
            "datos_por_fecha": datos
        }

    except HTTPException as e:
        raise e
    except Exception:
        raise HTTPException(status_code=500, detail="Error inesperado al procesar la solicitud")

@app.get(
    "/reportes/inversion/producto/serie",
    response_model=SerieProductoResponse,
    summary="Devuelve una serie temporal de inversión o ROI por producto"
)
async def obtener_serie_producto(
    id_campaña: int = Query(..., description="ID de la campaña"),
    producto: str = Query(..., description="Nombre del producto")
):
    try:
        datos = [
            {"fecha": "2025-01-01", "valor": 0.12},
            {"fecha": "2025-02-01", "valor": 0.18},
            {"fecha": "2025-03-01", "valor": 0.10},
        ]

        if not datos:
            raise HTTPException(status_code=404, detail="No se encontraron puntos para la campaña o producto")

        return datos

    except HTTPException as e:
        raise e
    except Exception:
        raise HTTPException(status_code=500, detail="Error interno del servidor")

